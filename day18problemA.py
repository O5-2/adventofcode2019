tunnels = """#################################################################################
#...#...#.....#...#.........#.#.........#.....#.......#.......#u....#...#...#...#
#.#.#.#.###.#.#.#.#.###.###.#.#.#######.#.###.#.#.#####.#.###.#.#.#.#.#.#.#.#.#S#
#.#.#.#.#h..#.#.#.#.#.#.#.....#.#..l..#.#...#.#.#.......#...#.#.#.#...#.#.#...#.#
#X#.#V#.#.###.###.#D#.#.#######I#####.#.#.#.#.#.###########.###.#.#####.#######.#
#.#...#...#...#...#.#.#.#.....#.#...#.#.#.#.#.#..p#.......#.....#.#.............#
#.#########.###.#.#.#.#.#.###.#.#.#.#.#Z#.#.#.#####.#####.#####.#.#############.#
#.#.......#....g#.#...#.O.#.#.#...#...#.#.#.#.#...#.....#.#...#.#.#...#.........#
#.#.#####.#######.###.#####.#.#######.#.#.#.#C#.#.#.###.#.#.#.###.#.#.#########.#
#...#.T...#...#y#...#...#...#.......#.#.#.#.#.#.#.#.#...#.#.#.....#.#.........#.#
#.###.#.###.#.#.###.###.#.#.#.#.#####.#.#.#.#.#.#.#.#.###.#.#######.#########.###
#.#.#.#.#...#.#...#...#.#.#.#.#.#.....#.#.#.#.#.#.#.#...#.#.....#.......#...#...#
#.#.#.###.###.#.#####.#.#.###.#.#.#####.###.#.#.#.#####.#.#.###.#.#####.#.#.###.#
#...#.......#.#.....#.#.#...#.#.#.#.F.#.#...#...#.#.....#.#.#.#...#...#.#.#.....#
###.#########.#.###.#.#.###.#.###.#.#.#.#.#######.#.#####.#.#.#####.#.###.#####.#
#...#...#.....#...#.N.#.....#.....#.#.#.#...#...#...#.....#.....#...#.....#.....#
#.###.#.#.###.#############.#######.#.#.###.#.#.#####.###########.#########.#####
#.....#.#...#.#...........#.#...#...#...#...#.#...#.......#.....#.#...#...#.#...#
#####.#####.#.#.#######.#.#.#.#.#.#####.#.#######.#.#####.#.###.#.#.###.#.#.###.#
#...#.#.....#.#.#.....#.#.#...#.#...#...#.#.....#...#.M.#...#.....#...#.#...#...#
###W#.#.#####.#.#.#####.#######.###.#.###.#.###.###.#.#.###.#######.#.#.#####.###
#...#.#.#...#.#...#...#.......#...#.#...#...#.#...#.#.#.#...#.#...#.#.#.#.#.....#
#.###.#.#.#.#.###.#.#######.#.###.#.###.#####.###.###.#.#####.#.###.#B#.#.#.###.#
#...#.#.#.#.....#.#.#.......#...#.#.#...#....a..#.....#.#...#.#.....#...#.....#.#
#.#.#.#.#########.#.#.###########.#.#####.#############.#.#.#.#.###############.#
#.#.#.#...........#.#...#.........#.....#.........#...#.#.#...#.#.#...........#.#
###.#.#############.#.#.#.#############.#.#####.#.###.#.#.#####.#.#.###.#####.#.#
#...#.......#.......#.#.#...#...#...#...#...#...#.#...#...#...#.#.#.#...#.....#.#
#.#########.#.#########.###.###.#.#.#.#.###.#.###.#.#.#####.###.#.#.#.###.#####.#
#.....#.....#...#.........#...#.#.#...#.#.#.#...#.#.#.......#...#...#.#...#.....#
#.#.###.#######.###.#########.#.#.#####.#.#.###.#.#.#######.#.###.###.#.#######.#
#.#...#.#...#.#...#...........#.#.#...#.#.#.#.#.#...#.......#...#...#.#.......#.#
#####.#.#.#.#.###.###.#####.###.#.###.#.#.#.#.#.#####.#########.#.###.#######.#.#
#.....#...#.....#...#.#...#.....#...#...#.#...#.#...#.#.#.......#.#...#.....#.#.#
#.#.#######.#######.###.#.#.#######.#.###.###.#.###.#.#.#.#########.###.###.#.#.#
#.#.#.....#.#.......#...#.#.#...#...#...#...#.#...#...#.#.#.........#.#.#.#.#.#.#
#.###.#.###.#.#######.###.###.#.#.#######.###.###.###.#.#.#.#####.###.#.#.#.#.#.#
#.#...#.....#...#.....#.#...E.#.#.......#...#.#.#...#...#.#.#.....#.....#.#.#.#.#
#.#.###########A###.###.#######.#######.#.#.#.#.###.#####.###.#####.#####.#.#.#.#
#.............#.....#.....................#.......#...........#...........#.....#
#######################################.@.#######################################
#.............#.......#.......#.............#......e..#...............#.....#...#
#####.#######.#####.#.###.###.#########.#.###.#.#####.#########.#####.#.###.#.#.#
#.....#.#...#.#.....#.....#...#.......#.#.....#.#...#.........#...#.R.#...#...#.#
#.#####.#.#.#.#.###########.###.#####.#.#.#####.#.###########.#####.###.#######.#
#.....#...#...#.#...#.#...#.#...#...#.#.#.....#.#.........#.#.....#.....#.....#.#
#####.#.#######.#.#.#.#.#.#.###.#.#.#.#.#####.#.###.###.#.#.#####.#.#####.###.#.#
#.....#...#.....#.#.#...#.#.#...#.#.#.#.#.#...#...#.#.#.#...#.....#.#.....#.#.#.#
#.#######.#.#.###.#.###.#.#.#.###.#.#.#.#.#.#####.#.#.#.#####.#####.#.#####.#.#.#
#...#.#s..#.#r..#.#...#.#.#.#...#.#...#.#.#.....#.#...#.......#.....#.#.....#.#.#
###.#.#.#####.#.#.###.###.#.###.#.#####.#.###.###.###.#########.#####.#.#####.#.#
#...#.#.#...#.#.#.#.......#.....#.#.....#...#.#...#.#.#...#.....#...#.#.....#...#
#.###.#.#.#.###.#.#######.#######.###.#.#.###.#.###.#.###.#.#####.#.#.#.###.###.#
#.#...#...#.#...#.......#...#...#.#...#.#.....#...#.#...#...#.....#.#.#...#.#...#
#K#.#######.#.###.#####.###.#.#.#.#.###.#########.#.###.#####.#####.#.###.#.#.###
#.#.....#...#.#..b..#.#...#.#.#.#.#...#.#.....#...#...#.#.....#...#...#.#.#.#...#
#.#####.#.###.#####.#.###.#.#.#.#.#.#.###.###.#.#####.#.#.#####.#######.#.#.###.#
#j#...#.......#..v#.....#.#...#.#.#.#...#...#...#.....#.#.#...#...........#.....#
#.#.#.#########.#.#####.#.#.#####.#.###.#.#.#####.###.#.#.#.#.#######.#######.###
#...#.#.....#...#.#.....#.#.#...#.#.#.#.#f#.#...#...#.#.#.#.#.......#...#.J.#...#
#####.#.###.#.###.#.#####.###.#.#.#.#.#.###.#.#.#.#.###.#.#.#######.#####.#.###.#
#...#.#.#.#...#...#.#w..#.....#.#.#...#.#...#.#...#.....#.#...#...#q......#.#...#
#.#.#.#.#.#####.###.###.#.#####.#.###.#.#.###.#######.###.#####.###########.#.###
#.#...#...#..x#.#...#.#.#...#...#...#.#.#.#.....#...#.........#.....#.....#.#...#
#.###.###.#.#.#.###.#.#Y#####.#####.#.#.#.#######.#.#######.###.#.###.#.###.###.#
#...#...#.#.#.#...#...#.....#.......#.#.#....z....#...#...#.#...#...#.#.#...#.#.#
#.#Q###.#.###.###.#.#######.#.#########.#.###########.#.#.###.#####.#.#.#.###.#.#
#.#...#.#.....#...#.#.......#.........#.#.......#...#...#.....#.....#k#...#.....#
#.###.###.#####.###.#.###############.#.#########.#.#.#########.###.#.#####.#####
#.#.#.#...#...#...#.#.#.....#.......#.#.#....d....#.#.........#.#.#.#.....#...#.#
#.#.#.#.###.#.###.###.#.#.###.#.#####.#.#.#########.#####.#####.#.#.#####.###.#U#
#.#.#.#.#.#.#...H.#...#.#.#...#.....#.#.#.#.......#.#...#.#.....#.......#.#.#.#.#
#.#.#.#.#.#.#####.#.#####.#.#######.#.#.#.#.#.#####.#.#.#.#.#####.#######.#.#.#.#
#...#.#.#.#.....#.#n#.....#.#.......#...#.#.#.........#.#.#.#.......#...#.#...#.#
###.#.#.#.#####G###.#.#####.#.#####.###.#.###.#########.###.#.#######.#P#.#.###.#
#m..#.#t#.....#.#...#.#.....#.#..i#.#...#...#.#...#o....L...#.#...#...#.#.#.....#
#.###.#.#.###.#.#.###.#.#####.###.#.#.###.#.###.#.#.###########.#.#.###.#.#####.#
#.#...#.#...#.#...#...#.#...#...#...#...#.#.....#.#.#...#.....#.#.#.#...#.#.#...#
#.#.###.#.#.#######.###.###.###.#######.#.#######.###.#.#.###.#.#.#.#.###.#.#.###
#.#.....#.#...................#.........#.......#.....#.....#...#...#..c..#.....#
#################################################################################"""

tunnels = tunnels.split('\n')

entrance = [40, 40]

tree = [['@', '@', 0]] 

bfs = [[[39, 42], [0, -1], '@', 3], [[41, 42], [0, -1], '@', 3], [[41, 38], [0, 1], '@', 3], [[39, 38], [0, 1], '@', 3], [[31, 38], [0, 1], '@', 11]]

while bfs:
    if (tunnels[bfs[0][0][1]][bfs[0][0][0]] not in "#."):
        tree.append([tunnels[bfs[0][0][1]][bfs[0][0][0]], bfs[0][2], bfs[0][3]])
    # check if bfs[0][0] is important. If so, add it to tree. (done)
    for i in [[0, -1], [0, 1], [-1, 0], [1, 0]]:
        if (tunnels[bfs[0][0][1]+i[1]][bfs[0][0][0]+i[0]] != '#') and (i != bfs[0][1]):
            if (tunnels[bfs[0][0][1]][bfs[0][0][0]] != '.'):
                bfs.append([[bfs[0][0][0]+i[0], bfs[0][0][1]+i[1]], [i[0]*-1, i[1]*-1], tunnels[bfs[0][0][1]][bfs[0][0][0]], 1])
            else:
                bfs.append([[bfs[0][0][0]+i[0], bfs[0][0][1]+i[1]], [i[0]*-1, i[1]*-1], bfs[0][2], bfs[0][3]+1])
    # for each of bfs[0][0]'s neighbors, except for the one in the forbidden direction, if they aren't a wall, add them to bfs. (done)
    bfs = bfs[1:]

# Each BFS element has four elements: Location, forbidden direction, parent, and distance to parent.

print(tree)
print(len(tree))

def distance(s, t):
    bfs = []
    for y in range(0, 80):
        for x in range(0, 80):
            if tunnels[y][x] == s:
                bfs = [[[x, y], [0, 0], s, 0]]
                break
    visited = []
    while tunnels[bfs[0][0][1]][bfs[0][0][0]] != t:
        for i in [[0, -1], [0, 1], [-1, 0], [1, 0]]:
            if ((tunnels[bfs[0][0][1]+i[1]][bfs[0][0][0]+i[0]] != '#') and (i != bfs[0][1])) and ([bfs[0][0][0]+i[0], bfs[0][0][1]+i[1]] not in visited):
                #if (tunnels[bfs[0][0][1]][bfs[0][0][0]] != '.'):
                #    bfs.append([[bfs[0][0][0]+i[0], bfs[0][0][1]+i[1]], [i[0]*-1, i[1]*-1], tunnels[bfs[0][0][1]][bfs[0][0][0]], 1])
                #else:
                bfs.append([[bfs[0][0][0]+i[0], bfs[0][0][1]+i[1]], [i[0]*-1, i[1]*-1], bfs[0][2], bfs[0][3]+1])
        # for each of bfs[0][0]'s neighbors, except for the one in the forbidden direction, if they aren't a wall, add them to bfs. (done)
        visited.append(bfs[0][0])
        bfs = bfs[1:]
    # Does this whole thing work?
    return bfs[0][3]

#for i in ['a', 'b', 'e', 'f', 'i', 'z', 'r', 'B', 'F']:
#    print(i, end=" ")
#print("")

#print(distance('a', '@'))
#print(distance('@', 'F'))
#print(distance('a', 'F'))
#print(distance('a', '@'))
#print(distance('@', 'B'))
#print(distance('a', 'B'))
#print(distance('a', '@'))
#print(distance('@', 'e'))
#print(distance('a', 'e'))

print(distance('k', 'm'))

print(distance('m', 'q'))

print(distance('q', 'v'))
print(distance('v', 'x'))

# Plan: Perform a BFS on the maze to create a "tree" of dependencies, represented as an array.
# Each element has three elements: A character (its name), another character (its parent), and an integer (the distance from it to its parent)
# There are at most 53 elements in that array, so I figure I can probably calculate the correct path manually.

# I've successfully computed the tree. Now to figure out the correct path.

# With the aid of draw.io (a flowchart drawing site), I have drawn the tree.
# I have also simplified it, and it's actually pretty easy to figure out the right path.
# Now I just have to do so.

# Oh, I was so wrong.
# Hopefully draw.io saves the maps for a few weeks.

# Stage 1: Low-Hanging Fruit
# Go from the entrance to b, then go from b to i.
# Go from i to z, then go from z to f, then go from f to e.
# Go from e to a.
# With all those unlocked, go from a through u to p.
# Stage 1 time: (94+92)+(142+18+40)+(48)+(194)
# Stage 1 total time: 628

# Stage 2: Moderately High Fruit
# Go from p to lower l.
# Go from lower l to o, then go from o to d.
# Go from d through c to k.
# Stage 2 time: (324) + (236+28) + (98)
# Stage 2 total time: 686

# Stage 3: Running Back And Forth To Get Fruit
# Go from k through r, s, and j to m.
# Go from m to q.
# Go from q through t to v, then go from v to x.

# Get r, s, j, and we might as well get m, and return to the entrance.
# With all that unlocked, go get q, and return to the entrance.
# With that unlocked, get t, v, and x, and stop at x.
# Stage 3 time: (540) + (572) + (622+34)
# Stage 3 total time: 1768

# Stage 4: Here And There And Everywhere
# Go from x through h to g.
# Go from g to n.
# Stage 4 time: 710 + 778
# Stage 4 total time: 1488

# Stage 5: Final Lap
# Go from n to y.
# Go from y to w.
# Stage 5 time: 808 + 834
# Stage 5 total time: 1642

# Total time: 628 + 686 + 1768 + 1488 + 1642 = 6212

# Lower bound: 5984.
# Upper bound: 6498.

# Alert! The wide area near the entrance may be causing significant errors regarding sideways distances on the tree!
# Furthermore, branching paths may be causing the same type of errors!
# The plan is still accurate, but the details are wrong!
# There's not *too* much sideways stuff, but there's still a significant amount!
# Okay, I think I've fixed this bit.

# Rotational order, from left going clockwise: 
# Top left quadrant: F.
# Top right quadrant: a, B.
# Bottom right quadrant: e, z, f
# Bottom left quadrant: i, b, r

# 6212 isn't right.
# How do I find the right answer?

# Ugh. At this point I'm just going to give up on the problem entirely.
# Maybe I'll come back to it (and 15B) when I understand BFS and graph traversal better.
